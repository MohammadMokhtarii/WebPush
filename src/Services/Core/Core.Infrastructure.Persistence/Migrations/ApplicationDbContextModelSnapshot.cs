// <auto-generated />
using System;
using System.Collections.Generic;
using Core.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("notificationseq", "Push")
                .IncrementsBy(10);

            modelBuilder.HasSequence("subscriberseq", "Segment")
                .IncrementsBy(10);

            modelBuilder.Entity("Core.Domain.Push.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "notificationseq", "Push");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<byte>("NotificationStatusId")
                        .HasColumnType("tinyint");

                    b.ComplexProperty<Dictionary<string, object>>("Body", "Core.Domain.Push.Notification.Body#NotificationPayload", b1 =>
                        {
                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(500)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(150)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(150)");
                        });

                    b.HasKey("Id")
                        .HasName("PK_Push_Notification");

                    b.HasIndex("DeviceId");

                    b.ToTable("Notification", "Push", t =>
                        {
                            t.HasComment("پیام");
                        });
                });

            modelBuilder.Entity("Core.Domain.Push.NotificationActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<byte>("NotificationStatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PK_Push_NotificationActivity");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationActivity", "Push", t =>
                        {
                            t.HasComment("لاگ پیام ");
                        });
                });

            modelBuilder.Entity("Core.Domain.Push.NotificationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<byte>("EventTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Push_NotificationEvent");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationEvent", "Push", t =>
                        {
                            t.HasComment("رویداد های پیام");
                        });
                });

            modelBuilder.Entity("Core.Domain.Segment.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubscriberId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ClientMetadata", "Core.Domain.Segment.Device.ClientMetadata#ClientMetadata", b1 =>
                        {
                            b1.Property<string>("OS")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PushManager", "Core.Domain.Segment.Device.PushManager#PushManager", b1 =>
                        {
                            b1.Property<string>("Auth")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Endpoint")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("P256DH")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");
                        });

                    b.HasKey("Id")
                        .HasName("PK_Segment_Device");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Device", "Segment", t =>
                        {
                            t.HasComment("دستگاه ها");
                        });
                });

            modelBuilder.Entity("Core.Domain.Segment.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "subscriberseq", "Segment");

                    b.Property<bool>("InActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Segment_Subscriber");

                    b.ToTable("Subscriber", "Segment", t =>
                        {
                            t.HasComment("مشتریان");
                        });
                });

            modelBuilder.Entity("Core.Infrastructure.Persistence.Core.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Error")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Base_OutboxMessage");

                    b.ToTable("OutboxMessage", "Base", t =>
                        {
                            t.HasComment("OutboxMessage");
                        });
                });

            modelBuilder.Entity("Core.Domain.Push.Notification", b =>
                {
                    b.HasOne("Core.Domain.Segment.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Segment_Device_Push_Notification");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Core.Domain.Push.NotificationActivity", b =>
                {
                    b.HasOne("Core.Domain.Push.Notification", null)
                        .WithMany("NotificationActivities")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Push_Notification_Push_NotificationEvent");
                });

            modelBuilder.Entity("Core.Domain.Push.NotificationEvent", b =>
                {
                    b.HasOne("Core.Domain.Push.Notification", null)
                        .WithMany("NotificationEvents")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Push_Notification_Push_NotificationActivity");
                });

            modelBuilder.Entity("Core.Domain.Segment.Device", b =>
                {
                    b.HasOne("Core.Domain.Segment.Subscriber", null)
                        .WithMany("Devices")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Segment_Subscriber_Segment_Device");
                });

            modelBuilder.Entity("Core.Domain.Push.Notification", b =>
                {
                    b.Navigation("NotificationActivities");

                    b.Navigation("NotificationEvents");
                });

            modelBuilder.Entity("Core.Domain.Segment.Subscriber", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
